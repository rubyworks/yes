= YES - YAML Easy Schema

[Author] Thomas Sawyer
[License] BSD-2-Clause
[Copyright] (c) 2011 Rubyworks, Thomas Sawyer


== DESCRIPTION

YES is a schema system for YAML.


== LIMITATIONS

* It is difficult to make inverse assertions. Such as "no other map keys are allowed".


== SYNOPSIS

It doesn't get any easier than this!

It's all about mapping YPaths to node specifications. YPath is a way to
select nodes in a YML document. The node specif cation is a set of
rules to which the nodes must conform. There rules are given as a mapping
of rule type to rule parameter. Let take an example:

    people/*/name:
      pattern: '[^/n]'

This simple schema selects all nodes under a `people` sequence of
mappings with a name key, the value of which cannot contain newlines.
In other words:

    --
    people:
      - name: Charlie Adams
      - name: Julie Ann Rose

Would satisfy the schema. But,

    --
    people:
      - name: |
          Charlie
          Adams

Would not.

To use on the command line. Say we have a `schema.yes` file:

    ---
    name:
      type: str
      pattern: '[^\n]'
      required: true
    age:
      type: int
    birth:
      type: date

Try it on `sample.yaml`.

    ---
    name: Thomas T. Thomas
    age: 42
    birth: 1976-07-04

Using the executable.

    $ yaml-yes schema.yes sample.yaml

In code that is:

    require 'yes'

    yes = YES.new(File.new('schema.yes'))
    yes.validate(File.new('sample.yaml'))


== CONTRIBUTE

Come on folks! Let's get YAML up to snuff. A good Schema could really
help YAML go the distance and penetrate some of those "Enterpisy" worlds.

* Please read, write and comment on issues[https://github.com/rubyworks/yes/issues].
* Please critique the code.
* Please fork and submit patches in topic branches.

And please contribute to {Rubyworks Ruby Development Fund}[http://rubyworks.github.org]
so us poor Ruby OSS developers can eat :)


== COPYRIGHT

(BSD-2 license)

Copyright (c) 2011 Rubyworks, Thomas Sawyer
